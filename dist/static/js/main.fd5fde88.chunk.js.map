{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/projects/ProjectSummary.js","components/projects/ProjectList.js","components/dashboard/Dashboard.js","components/projects/ProjectDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","components/projects/CreateProjects.js","store/actions/projectActions.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","onClick","profile","initials","SignedOutLinks","state","firebase","links","uid","isLoaded","Notifications","notifications","map","item","key","id","user","content","moment","time","toDate","fromNow","ProjectSummary","project","title","authorFirstname","authorLastName","createdAt","calendar","ProjectList","projects","Dashboard","this","Component","compose","console","log","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","SignIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","resp","doc","set","CreateProjects","createProject","history","push","authorId","add","Date","App","exact","path","component","ProjectDetails","CreateProject","Boolean","window","location","hostname","initState","authReducer","action","message","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","rrfProps","config","userProfile","useFirestoreForProfile","enableRedirectHandling","resetBeforeLogin","createFirestoreInstance","AuthIsLoaded","children","useSelector","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.fd5fde88.chunk.js","sourcesContent":["import React, { Profiler } from 'react'\nimport { NavLink } from 'react-router-dom'\n// to get 'active' class and show when only signed in\n\nimport { connect } from 'react-redux'\nimport { signOut } from '../../store/actions/authActions'\n\n// this is not a functional component so we need to take props\n// so we can't this.props \nconst SignedInLinks = (props) => {\n\n  return(\n    <ul className=\"right\">\n      <li><NavLink to='/create'>New Project</NavLink></li>\n      {/* if it was onClick={props.signOut() the function will run automatically when the page loads} */}\n      <li><a onClick={props.signOut}>Log Out</a></li>\n      <li><NavLink to='/' className='btn btn-floating pink lighten-1'>\n        {props.profile.initials}\n        </NavLink></li>\n    </ul>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signOut: () => dispatch(signOut())\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(SignedInLinks)","// credentials are going to be email and password\nexport const signIn = (credentials) => {\n  // because of thunk we can halt the process and return a function \n  return (dispatch, getState, {getFirebase}) => {\n    const firebase = getFirebase();\n\n    firebase.auth().signInWithEmailAndPassword(\n      credentials.email,\n      credentials.password\n    ).then(() => {\n      dispatch({ type: 'LOGIN_SUCCESS' });\n    }).catch((err) => {\n      dispatch({ type: 'LOGIN_ERROR', err });\n    });\n\n  }\n}\n\nexport const signOut = () => {\n  return (dispatch, getState, {getFirebase}) => {\n    const firebase = getFirebase();\n\n    firebase.auth().signOut().then(() => {\n      dispatch({ type: 'SIGNOUT_SUCCESS' })\n    });\n  }\n}\n\nexport const signUp = (newUser) => {\n  // getFirebase to get UID from auth service\n  // getFirestore to store user details(firstname, lastname)\n  // then with UID we can identify user \n  return (dispatch, getState, {getFirebase, getFirestore}) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n\n    firebase.auth().createUserWithEmailAndPassword(\n      newUser.email,\n      newUser.password\n    ).then((resp) => {\n      // use .doc to create a new doc instead of .add \n      // because if .add it will generate second uid which then won't match with the user\n      // .set to set properties of user\n      return firestore.collection('users').doc(resp.user.uid).set({\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        initials: newUser.firstName[0] + newUser.lastName[0]\n      })\n    }).then(() => {\n      dispatch({ type: 'SIGNUP_SUCCESS' })\n    }).catch(err => {\n      dispatch({ type: 'SIGNUP_ERROR', err })\n    })\n  }\n}","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n// to get 'active' class and show when only signed in\nconst SignedOutLinks = () => {\n  return(\n    <ul className=\"right\">\n      <li><NavLink to='/signup'>SignUp</NavLink></li>\n      <li><NavLink to='/signin'>Login</NavLink></li>\n    </ul>\n  )\n}\n\nexport default SignedOutLinks","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport SignedInLinks from './SignedInLinks'\nimport SignedOutLinks from './SignedOutLinks'\n// we are just connecting to our reducers not firestore.\n// thus just connect, not firestoreConnect\nimport { connect } from 'react-redux'\nimport { isLoaded } from 'react-redux-firebase'\nconst Navbar = (props) => {\n  // grabbing the auth property we attached down from auth: state.firebase.auth\n  const { auth, profile } = props;\n  // console.log(auth)\n  const links = auth.uid ? <SignedInLinks profile={profile}/> : <SignedOutLinks />\n  return(\n    <nav className=\"nav-wrapper grey darken-3\">\n      <div className=\"container\">\n        <Link to='/' className=\"brand-logo\">MarioPlan</Link>\n        { isLoaded(auth) && links }\n      </div>\n    </nav>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  // console.log(state)\n  return {\n    // check out console.log(state).\n    auth: state.firebase.auth,\n    profile: state.firebase.profile\n  }\n}\n\nexport default connect(mapStateToProps)(Navbar)","import React from 'react'\nimport moment from 'moment'\nconst Notifications = (props) => {\n  const { notifications } = props; // this is an array\n  return(\n    <div className=\"section\">\n     <div className=\"card z-depth-0\">\n      <div className=\"card-content\">\n        <span className=\"card-title\">Notifications</span>\n        <ul className=\"notifications\">\n          { notifications && notifications.map(item => {\n            return (\n              <li key={item.id}>\n                <span className=\"pink-text\">{item.user} </span>\n                <span>{item.content}</span>\n                <div className=\"grey-text note-date\">\n                  {moment(item.time.toDate()).fromNow()}\n                </div>\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n     </div>\n    </div>\n  )\n}\n\nexport default Notifications","// keep the template of ProjectList, making the app more modular\n\nimport React from 'react'\nimport moment from 'moment'\n// receive individual project from ProjectList\nconst ProjectSummary = ({project}) => {\n  return(\n    <div className=\"card z-depth-0 project-summary\">\n        <div className=\"card-content grey-text text-darken-3\">\n          <span className=\"card-title\">{project.title}</span>\n          <p>Posted by {project.authorFirstname} {project.authorLastName}</p>\n          <p className=\"grey-text\">{moment(project.createdAt.toDate()).calendar()}</p>\n        </div>\n      </div>\n  )\n}\n\nexport default ProjectSummary","import React from 'react'\nimport ProjectSummary from './ProjectSummary'\nimport { Link } from 'react-router-dom'\n// receiving those props by doing ({projects})\nconst ProjectList = ({projects}) => {\n  \n  return(\n    <div className=\"porjcet-list section\">\n      {/* if done project.map(project => {}) */}\n      {/* we might not have any projects to start with thus nothing to show */}\n      {/* or until  our component reaches out to an external database in the future */}\n      {/* we might not have any projects */}\n      {/* by adding porjects && and it's saying if we have projects then do the projects.map() */}\n      \n      { projects && projects.map(project => {\n        return(\n          <Link to={'/project/' + project.id}>\n          <ProjectSummary project={project} key={project.id} />\n          </Link>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default ProjectList","import React, { Component } from 'react'\nimport Notifications from './Notifications'\nimport ProjectList from '../projects/ProjectList'\n\n// glues react(Dashboard.js) to redux(store)\nimport { connect } from 'react-redux'\n\n// firestoreConnect gets us a higer order component \n// which will allow it to know what to connect to\nimport { firestoreConnect } from 'react-redux-firebase'\n\n// for combining 2 higher order components so we can use\n// both connect and firestoreConnect\nimport { compose } from 'redux'\n\nimport { Redirect } from 'react-router-dom'\nclass Dashboard extends Component {\n  render(){\n    // console.log(this.props);\n    const { projects, auth } = this.props;\n    if(!auth.uid) return <Redirect to ='/signin' />\n    return(\n      <div className=\"dashboard container\">\n        <div className=\"row\">\n          <div className=\"col s12 m6\">\n            {/* passing projects object down to ProjectList */}\n            <ProjectList projects={projects} />\n          </div>\n          <div className=\"col s12 m5 offset-m1\">\n            <Notifications />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\n// return{} this returned object represents which properties are attached to\n// the props of this component so then we can access them inside this component\nconst mapStateToProps = (state) => {\n  console.log(state)\n  return {\n    // rootReducer -> connect project property in the state \n    // then go to projectReducer.js then connect project: [{id: '1' ...}]\n    projects: state.firestore.ordered.projects,\n    auth: state.firebase.auth\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    { collection: 'projects', orderBy: ['createdAt', 'desc'] },\n    { collection: 'notifications', limit: 3, orderBy: ['time', 'desc'] }\n  ])\n)(Dashboard)\n\n// export default compose(\n//   firestoreConnect(() => ['projects']),\n//   connect(mapStateToProps)\n//   )(Dashboard)\n\n","// rafce + tap => create the template below \nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { Redirect } from 'react-router-dom'\nimport { compose } from 'redux'\nimport moment from 'moment'\n// props have been attatched from App.js\n// <Route path=\"/project/:id\" component={ProjectDetails} />\n// when we use router to load a component, React automatically \n// attatches props to it\n// check props from console.log(props) for the id constant below\nconst ProjectDetails = (props) => {\n//  const id = props.match.params.id;\n//  console.log(props)\nconst { project, auth } = props;\nif(!auth.uid) return <Redirect to='/signin' />\n\nif (project) {\n  return (\n    <div className=\"container section project-details\">\n      <div className=\"card z-depth-0\">\n        <div className=\"card-content\">\n          <span className=\"card-title\">{ project.title }</span>\n          <p>{ project.content }</p>\n        </div>\n        <div className=\"card-action grey lighten-4 grey-text\">\n          <div>Posted by {project.authorFirstname} {project.authorLastName}</div>\n          <div>{moment(project.createdAt.toDate()).calendar()}</div>\n        </div>\n      </div>\n    </div>\n  )\n} else {\n  return (\n    <div className=\"container center\">\n      <p>Loading project...</p>\n    </div>  \n  )\n}\n \n}\n\n// the object in return represents what we want to attatch to props\nconst mapStateToProps = (state, ownProps) => {\n  // console.log(state);\n  const id = ownProps.match.params.id;\n  const projects = state.firestore.data.projects\n  const project = projects ? projects[id] : null\n  return {\n    project: project,\n    auth: state.firebase.auth\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps), \n  firestoreConnect([\n    { collection: 'projects' }\n  ])\n)(ProjectDetails)\n","// this has to be class-based component \n// because we want to store, in a local store, what a user types in to the input field\n\n// rce to create this template\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { signIn } from '../../store/actions/authActions'\nimport { Redirect } from 'react-router-dom'\n\nclass SignIn extends Component {\n  state = {\n    email: '',\n    password: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      // to indetify which property to update\n      [e.target.id]: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.signIn(this.state);\n  }\n  render() {\n    const { authError, auth } = this.props;\n    if(auth.uid) return <Redirect to='/' />\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit}className=\"white\">\n          <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">LOGIN</button>\n            <div className=\"red-text center\">\n              { authError ? <p>{authError}</p> : null }\n            </div>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return{\n    authError: state.auth.authError,\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (creds) => dispatch(signIn(creds))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn)\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { signUp } from '../../store/actions/authActions'\nclass SignUp extends Component {\n  state = {\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      // to indetify which property to update\n      [e.target.id]: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(this.state)\n    this.props.signUp(this.state)\n  }\n  render() {\n    const { auth, authError } = this.props;\n    if(auth.uid) return <Redirect to='/' />\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit}className=\"white\">\n          <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"firstName\">First Name</label>\n            <input type=\"text\" id=\"firstName\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"lastName\">Last Name</label>\n            <input type=\"text\" id=\"lastName\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Sign up</button>\n            <div className=\"red-text center\">\n              { authError ? <p>{ authError }</p> : null }\n            </div>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth,\n    authError: state.auth.authError\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signUp: (newUser) => dispatch(signUp(newUser))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { createProject } from '../../store/actions/projectActions'\nimport { Redirect } from 'react-router-dom'\nclass CreateProjects extends Component {\n  state = {\n    title: '',\n    content: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      // to indetify which property to update\n      [e.target.id]: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(this.state);\n    this.props.createProject(this.state)\n\n    // redirect user when done creating a project\n    // this.props.history.push() from route information from App.js \n    this.props.history.push('/');\n  }\n  render() {\n    const { auth } = this.props;\n    if(!auth.uid) return <Redirect to='/signin' />\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit}className=\"white\">\n          <h5 className=\"grey-text text-darken-3\">Create new project</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"title\">Title</label>\n            <input type=\"text\" id=\"title\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"content\">Project Content</label>\n            <textarea id=\"content\" className=\"materialize-textarea\" onChange={this.handleChange}></textarea>\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Create</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // project passed down here is from this.state \n    createProject: (project) => dispatch(createProject(project))\n  }\n}\n\n// first parameter shoulb be mapStateToProps but since we don't have \n// we just pass null \nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProjects)\n","export const createProject = (project) => {\n  // return {\n  //   type: 'ADD_PROJECT',\n  //   project: project\n  // } \n  // above is normal way\n\n  // with thunk we can return a function\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    // make async call to database\n    \n    // create a constant that gives a reference to firestore database\n    const firestore = getFirestore();\n\n    const profile = getState().firebase.profile;\n    const authorId = getState().firebase.auth.uid;\n    firestore.collection('projects').add({\n      ...project,\n      authorFirstname: profile.firstName,\n      authorLastName: profile.lastName,\n      authorId: authorId,\n      createdAt: new Date()\n    }).then(() => {\n      dispatch({ type: 'CREATE_PROJECT', project: project });\n    }).catch((err) => {\n      dispatch({ type: 'CREATE_PROJECT_ERROR', err });\n    })\n    // when async process is done then after that we dispatch action\n    \n  }\n};\n\n// npm install react-redux-firebase redux-firestore\n// react-redux-firebase provides bindings to the firebase service as a whole\n// redux-firestore provides redux bindings for firestore databases","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Navbar from './components/layout/Navbar'\nimport Dashboard from './components/dashboard/Dashboard'\nimport ProjectDetails from './components/projects/ProjectDetails'\nimport SignIn from './components/auth/SignIn'\nimport SignUp from './components/auth/SignUp'\nimport CreateProject from './components/projects/CreateProjects'\nclass App extends Component {\n\n  render() {\n    return (\n      <BrowserRouter>\n      <div className=\"App\">\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/\" component={Dashboard} />\n        <Route path=\"/project/:id\" component={ProjectDetails} />\n        <Route path=\"/signin\" component={SignIn} />\n        <Route path=\"/signup\" component={SignUp} />\n        <Route path=\"/create\" component={CreateProject} />\n      </Switch>\n      </div>\n    </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n  authError: null\n}\n\nconst authReducer = (state = initState, action) => {\n  switch(action.type){\n    case 'LOGIN_ERROR':\n      console.log('login error')\n      return {\n        ...state,\n        authError: 'Login failed'\n      }\n    case 'LOGIN_SUCCESS':\n      console.log('login success')\n      return{\n        ...state,\n        authError: null\n      }\n    case 'SIGNOUT_SUCCESS':\n      console.log('signout success');\n      return state;\n    case 'SIGNUP_SUCCESS':\n      console.log('signup success');\n      return{\n        ...state,\n        authError: null\n      }\n    case 'SIGNUP_ERROR':\n      console.log('signup error') \n      return{\n         ...state,\n         authError: action.err.message\n       } \n    default:\n      return state;  \n  }\n}\n\nexport default authReducer","const initState = {\n  projects:[\n    {id: '1', title: 'help me find peach', content: 'blah blah blah'},\n    {id: '2', title: 'collect all the stars', content: 'blah blah blah'},\n    {id: '3', title: 'egg hunt with yoshi', content: 'blah blah blah'}\n  ]\n}\n// there project: [] will be stored in rootReducer.js in project property\n\nconst projectReducer = (state = initState, action) => {\n  switch (action.type) {\n    case 'CREATE_PROJECT':\n      console.log('created project', action.project)\n      return state;\n    case 'CREATE_PROJECT_ERROR':\n      console.log('create project error', action.err)\n      return state;\n    default:\n      return state;  \n  }\n}\n\nexport default projectReducer","// combine two reducers to one reducer\n\nimport authReducer from './authReducer'\nimport projectReducer from './projectReducer'\nimport { combineReducers } from 'redux'\n\n// a premade reducer that is made for syncing our firestore data with our state\nimport { firestoreReducer } from 'redux-firestore'\n\n// for firebase authentication \nimport { firebaseReducer } from 'react-redux-firebase'\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  project: projectReducer,\n  firestore: firestoreReducer,\n  firebase: firebaseReducer\n});\n\nexport default rootReducer","// npm install firebase\n// importing just base features from firebase library by adding /app\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nvar config = {\n  apiKey: \"AIzaSyBiOzcREFKfwEpnSlZfujbLKIs4kLRUHzI\",\n  authDomain: \"net-ninja-marioplan-6c444.firebaseapp.com\",\n  databaseURL: \"https://net-ninja-marioplan-6c444.firebaseio.com\",\n  projectId: \"net-ninja-marioplan-6c444\",\n  storageBucket: \"net-ninja-marioplan-6c444.appspot.com\",\n  messagingSenderId: \"483252353244\",\n  appId: \"1:483252353244:web:e3fc6aa6927da072955c19\"\n};\n\nfirebase.initializeApp(config);\n// firebase.firestore().settings({ timestampsInSnapshots: true }) // not needed anymore\n\nexport default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// create store in index.js\n// import applyMiddleware from redux for thunk\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './store/reducers/rootReducer'\n\n// allows our application to have access to reducer\nimport { Provider } from 'react-redux'\n\n// going to create multiple reducers to manage different actions\n// actions for handling project actions; create project, delete project\n// for authentication; signup,login \n// then combine into a single root reducer\n\n// npm install redux-thunk \n// redux thunk is a middleware so we need to apply it to our store\nimport thunk from 'redux-thunk'\n\n// applyMiddleware is a store enhancer, giving extra functionalities\n// we can have many enhancers inside createstore(rootReducer, A, B, C...)\n// they enhance store with extra functionalities \n// with functionalities, we can return a function inside our action creators then interact with database\n\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore'\nimport { ReactReduxFirebase, ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase'\nimport firebase from 'firebase/app'\nimport fbConfig from './config/fbConfig'\nimport { useSelector  } from 'react-redux'\nimport { isLoaded } from 'react-redux-firebase'\n\n\n// we want to use both getFirestore and getFirebase so we can access the firebase\n// or firestore API inside the function in projectAction.js\nconst store = createStore(rootReducer, \n  compose(\n    applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n    // tells where to connect to\n    reduxFirestore(fbConfig),\n    // reactReduxFirebase(fbConfig, {attachAuthIsReady: true})\n  )\n);\n\n// const rrfConfig = {\n//   userProfile: 'users',\n//   useFirestoreForProfile: true\n// }\n// const rrfProps = {\n//   firebase,\n//   config: rrfConfig,\n//   dispatch: store.dispatch,\n//   createFirestoreInstance,\n\n// }\n\n// // function AuthIsLoaded({children}) {\n// //   const auth = useSelector(state => state.firebase.auth)\n// //   if(!isLoaded(auth)) return<div>Loading screen...</div>;\n// //   return children\n// // }\n\n\n//     ReactDOM.render(\n//       <Provider store={store}>\n//         <ReactReduxFirebaseProvider {...rrfProps}>\n//           {/* <AuthIsLoaded> */}\n//             <App />\n//           {/* </AuthIsLoaded> */}\n//         </ReactReduxFirebaseProvider>\n//       </Provider>, document.getElementById('root'));\n//       serviceWorker.unregister();    \n\nconst profileSpecificProps = {\n  userProfile: 'users',\n  useFirestoreForProfile: true,\n  enableRedirectHandling: false,\n  resetBeforeLogin: false\n}\n\n\nconst rrfProps = {\n  firebase,\n  config: fbConfig,\n  config: profileSpecificProps,\n  dispatch: store.dispatch,\n  createFirestoreInstance\n};\n\nfunction AuthIsLoaded({ children }) {\n  const auth = useSelector(state => state.firebase.auth)\n  if (!isLoaded(auth)) return <div className=\"center\"> <p>Loading Mario Plan...</p></div>;\n      return children\n}\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n      <AuthIsLoaded>\n      <App />\n      </AuthIsLoaded>\n      \n    </ReactReduxFirebaseProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}